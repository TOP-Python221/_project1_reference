                    Архитектура


=================== Общий раздел ===================

1. Вид релиза приложения

    Несколько файлов с кодом, выполняемых с помощью интерпретатора Python 3.10.


2. Структура приложения

    Модуль верхнего уровня, включающий в себя суперцикл с обработкой команд пользователя и вызовом основных функций.

    Дополнительные модули, содержащие все основные функции приложения.

    Модули стандартной библиотеки.


3. Структура хранения данных

    Два INI-файла для хранения информации об игроках (players.ini) и о сохранённых партиях (saves.ini)

    players.ini

        [player 1]
        hash = s098123j1nkf47evp9
        first_time = True
        stats = 1,0,1

        [player 2]
        ...

    saves.ini

        [player1,player2]
        X = player1
        turns = XOOXX--O-

        [player3,player2]
        ...

4. Работа с данными в приложении

    # Имена игроков, статистика игроков

        {'player1': {'first_time': True,
                     'stats': {'wins': 0, 'ties': 0, 'fails': 0}},

         'player2': {'first_time': False,
                     'stats': {'wins': 3, 'ties': 2, 'fails': 0}},

         ...}

    # Сохранённые незаконченные партии

         {frozenset({'player1', 'player2'}):
                   {'turns': 'XOOXX--O-', 'X': 'player1'},

          frozenset({'player3', 'player2'}):
                   {'turns': '-X-OO-OXX', 'X': 'player2'},

          ...}

    # Ходы в текущей партии

        {frozenset({'player1', 'player2'}):
            {'X': 'player1',
             'player1': (1, 4, 5),
             'player2': (2, 3, 8)}}

        [ ['X', 'O', 'O'],
          ['X', 'X', ' '],
          [' ', 'O', ' '] ]
        ('player 1', 'player 2')
        ('X', 'O')

    # Возвращаемое значение функции game()

        ({'wins': 1, 'ties': 0, 'fails': 0},
         {'wins': 0, 'ties': 0, 'fails': 1})

        ({'wins': 0, 'ties': 1, 'fails': 0},
         {'wins': 0, 'ties': 1, 'fails': 0})

        None



============= Этапы работы приложения ==============

1. Загрузка файлов настроек

2. ЕСЛИ первый запуск приложения:
        вывод раздела помощи

3. Запрос имени игрока
    а) ЕСЛИ имя среди зарегистрированных игроков:
            ИСТИНА: выбираем этого игрока как активного
            ЛОЖЬ: запускаем процесс создания нового игрока и делаем его активным

Суперцикл:

    4. Ожидание ввода пользовательских команд

    5. Запрос режима игры
        а) ЕСЛИ "бот":
                запрос уровня сложности
        б) ЕСЛИ "два человека":
                запрос имени второго игрока

    6. ЕСЛИ первая партия для любого из игроков:
            включение режима обучения

    7. Партия

    8. ЕСЛИ партия закончена досрочно:
            сохранение данных о партии

    9. Внесение изменений в статистику игрока(-ов)

10. Запись данных в конфигурационные файлы



================= Основные функции =================

read_ini() -> bool:
    """Читает конфигурационные файлы, сохраняет прочитанные данные в глобальные переменные и возвращает True если приложение запущено впервые, иначе False."""


show_help() -> None:
    """Выводит в stdout раздел помощи."""


get_player_name() -> None:
    """Запрашивает имя игрока и проверяет присутствие этого имени в глобальной переменной статистики, добавляет имя в глобальную переменную текущих игроков."""


new_player(player_name: str) -> None:
    """Создаёт запись о новом игроке в глобальной переменной статистики."""


show_field()
    Выводит в стандартный поток игровое поле с ходами игроков.


check_win()
    Проверяет игровое поле, есть ли выигрышная комбинация
